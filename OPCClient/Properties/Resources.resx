<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CONTROL_PANEL" xml:space="preserve">
    <value>Control Panel</value>
    <comment>Control Panel</comment>
  </data>
  <data name="INPUT_SIGNALS" xml:space="preserve">
    <value>Input Signals</value>
    <comment>Input signals</comment>
  </data>
  <data name="SAVE" xml:space="preserve">
    <value>Save</value>
    <comment>Save</comment>
  </data>
  <data name="SAVE_TIP" xml:space="preserve">
    <value>Save 10 thousand updated sampling points at most after simpling ends</value>
    <comment>Save 10 thousand updated sampling points at most after simpling ends</comment>
  </data>
  <data name="SET_NUM_SAM" xml:space="preserve">
    <value>Set the displayed duration</value>
    <comment>Set the displayed number of simpling points</comment>
  </data>
  <data name="SET_SIMPLING_PERIOD" xml:space="preserve">
    <value>Set the sampling period</value>
    <comment>Set the sampling preiod</comment>
  </data>
  <data name="SHOW_SIGNAL_CHANGE" xml:space="preserve">
    <value>Show signal change chart</value>
    <comment>Show signal change chart</comment>
  </data>
  <data name="SHOW_SIGNAL_VALUE" xml:space="preserve">
    <value>Show dynamic signal value Gauge</value>
    <comment>Show dynamic signal value Gauge</comment>
  </data>
  <data name="SIGNAL_CHANGE_CH" xml:space="preserve">
    <value>Signal Change Chart</value>
    <comment>Signal Change Chart</comment>
  </data>
  <data name="SIGNAL_VALUE" xml:space="preserve">
    <value>Signal Value</value>
    <comment>Signal Value</comment>
  </data>
  <data name="SIGNAL_VALUE_GA" xml:space="preserve">
    <value>Signal Value Gauge</value>
    <comment>Signal Value Gauge</comment>
  </data>
  <data name="SIMPLING_DURATION" xml:space="preserve">
    <value>Displayed Duration:</value>
    <comment>Displayed sampling duration:</comment>
  </data>
  <data name="SIMPLING_PERIOD" xml:space="preserve">
    <value>Sampling Period:</value>
    <comment>Simpling period</comment>
  </data>
  <data name="SIM_SIN" xml:space="preserve">
    <value>Simple the sinusoidal signal or not</value>
    <comment>Simple the sinusoidal signal or not</comment>
  </data>
  <data name="SIM_SQU" xml:space="preserve">
    <value>Simple the square signal or not</value>
    <comment>Simple the square signal or not</comment>
  </data>
  <data name="SIM_TRI" xml:space="preserve">
    <value>Simple the triangle-wave signal or not</value>
    <comment>Simple the triangle-wave signal or not</comment>
  </data>
  <data name="SINUSOIDAL_SIGNAL" xml:space="preserve">
    <value>Sinusoidal signal</value>
    <comment>Sinusoidal signal</comment>
  </data>
  <data name="SQUARE_SIGNAL" xml:space="preserve">
    <value>Square signal</value>
    <comment>Square signal</comment>
  </data>
  <data name="START" xml:space="preserve">
    <value>Start</value>
    <comment>Start</comment>
  </data>
  <data name="START_STOP_TIP" xml:space="preserve">
    <value>Start or stop signal simpling and showing</value>
    <comment>Start or stop signal simpling and showing</comment>
  </data>
  <data name="STOP" xml:space="preserve">
    <value>Stop</value>
    <comment>Stop</comment>
  </data>
  <data name="TIME" xml:space="preserve">
    <value>Time</value>
    <comment>Time</comment>
  </data>
  <data name="TIP_CANCEL" xml:space="preserve">
    <value>Cancel data saving!</value>
    <comment>Cancel data saving!</comment>
  </data>
  <data name="TIP_DATASAVED" xml:space="preserve">
    <value>Data is successfully saved!</value>
    <comment>Data is successfully saved!</comment>
  </data>
  <data name="TIP_ERROR" xml:space="preserve">
    <value>Error: </value>
    <comment>Error</comment>
  </data>
  <data name="TIP_SAVINGDATA" xml:space="preserve">
    <value>Saving Data</value>
    <comment>Data is being saved</comment>
  </data>
  <data name="TIP_START" xml:space="preserve">
    <value>Start</value>
    <comment>Start to show data</comment>
  </data>
  <data name="TIP_STOP" xml:space="preserve">
    <value>Stop</value>
    <comment>Stop showing data</comment>
  </data>
  <data name="TRIANGLE_SIGNAL" xml:space="preserve">
    <value>Triangle-wave signal</value>
    <comment>Triangle-wave signal</comment>
  </data>
  <data name="WINDOW_TITLE" xml:space="preserve">
    <value>OPCClient</value>
    <comment>Window title</comment>
  </data>
</root>