//==============================================================================
// TITLE: opcda.idl
//
// CONTENTS:
// 
// Interface declarations for the OPC Data Access specifications.
//
// (c) Copyright 1997-2002 The OPC Foundation
// ALL RIGHTS RESERVED.
//
// DISCLAIMER:
//  This code is provided by the OPC Foundation solely to assist in 
//  understanding and use of the appropriate OPC Specification(s) and may be 
//  used as set forth in the License Grant section of the OPC Specification.
//  This code is provided as-is and without warranty or support of any sort
//  and is subject to the Warranty and Liability Disclaimers which appear
//  in the printed OPC Specification.
//
// MODIFICATION LOG:
//
// Date       By    Notes
// ---------- ---   -----
// 1997/05/12 ACC   fixed UNCERTAIN bits, add AsyncIO2, OPCDataCallback, 
//                  OPCItemProperties,  BROWSE_TO
//
// 1998/06/19 ACC   change V2 uuids prior to final release
//                  to avoid conflict with 'old' OPCDA Automation uuids
//                  Change name of 3 methods on AsyncIO2 to
//                  Cancel2,SetEnable,GetEnable to eliminate conflicts
//
// 2002/02/10 CRT   Added IOPCItemDeadbandMgt Interface
//		            Added IOPCItemSamplingMgt Interface
//		            Added IOPCBrowse          Interface
//		            Added IOPCServer2         Interface
//		            Added IOPCItemIO          Interface
//		            Added new BAD Quality status mask
//
// 2002/08/09 CRT   Added IOPCITEMVQTstructure
//		            Moved #defines to Library section and “typed?them
//		            Added definition for Category Ids
//
// 2002/08/21 RSA   Added asynchrounous UUIDs. Fixed formatting.
//
// 2002/08/30 CRT   Added IOPCSyncIO2::Read
//		            Added IOPCServer2::RemoveGroupEx
//
// 2002/09/20 CRT   Added bit masks for Browse method
//
// 2002/10/03 CRT   Added IOPCAsyncIO3 Interface
//		            Added IOPCGroupStateMgt2 Interface
//
// 2003/03/03 RSA   Added fields to ensure natural byte alignment for new structures.
// 2003/10/12 RSA   Added constants for complex data properties.
// 2004/09/01 RSA   Renamed modules in TYPELIB section to avoid name conflicts.
//

import "oaidl.idl";
import "ocidl.idl";
import "objidl.idl";

//==============================================================================
// Category ID declarations (defined as interfaces to ensure they show up in the typelib).

[uuid(63D5F430-CFE4-11d1-B2C8-0060083BA1FB)] interface CATID_OPCDAServer10 : IUnknown {}
[uuid(63D5F432-CFE4-11d1-B2C8-0060083BA1FB)] interface CATID_OPCDAServer20 : IUnknown {}
[uuid(CC603642-66D7-48f1-B69A-B625E73652D7)] interface CATID_OPCDAServer30 : IUnknown {}
[uuid(3098EDA4-A006-48b2-A27F-247453959408)] interface CATID_XMLDAServer10 : IUnknown {}

cpp_quote("#define CATID_OPCDAServer10 IID_CATID_OPCDAServer10")
cpp_quote("#define CATID_OPCDAServer20 IID_CATID_OPCDAServer20")
cpp_quote("#define CATID_OPCDAServer30 IID_CATID_OPCDAServer30")
cpp_quote("#define CATID_XMLDAServer10 IID_CATID_XMLDAServer10")

//==============================================================================
// Structures, Typedefs and Enumerations.

typedef DWORD OPCHANDLE;

typedef enum tagOPCDATASOURCE
{
	OPC_DS_CACHE = 1,
	OPC_DS_DEVICE
}
OPCDATASOURCE;

typedef enum tagOPCBROWSETYPE
{
	OPC_BRANCH = 1,
	OPC_LEAF,
	OPC_FLAT
}
OPCBROWSETYPE;

typedef enum tagOPCNAMESPACETYPE
{
	OPC_NS_HIERARCHIAL = 1,
	OPC_NS_FLAT
}
OPCNAMESPACETYPE;

typedef enum tagOPCBROWSEDIRECTION
{
	OPC_BROWSE_UP = 1,
	OPC_BROWSE_DOWN,
	OPC_BROWSE_TO
}
OPCBROWSEDIRECTION;

typedef enum tagOPCEUTYPE
{
	OPC_NOENUM = 0,
	OPC_ANALOG,
	OPC_ENUMERATED
}
OPCEUTYPE;

typedef enum tagOPCSERVERSTATE
{
	OPC_STATUS_RUNNING = 1,
	OPC_STATUS_FAILED,
	OPC_STATUS_NOCONFIG,
	OPC_STATUS_SUSPENDED,
	OPC_STATUS_TEST,
	OPC_STATUS_COMM_FAULT
}
OPCSERVERSTATE;

typedef enum tagOPCENUMSCOPE
{
	OPC_ENUM_PRIVATE_CONNECTIONS = 1,
	OPC_ENUM_PUBLIC_CONNECTIONS,
	OPC_ENUM_ALL_CONNECTIONS,
	OPC_ENUM_PRIVATE,
	OPC_ENUM_PUBLIC,
	OPC_ENUM_ALL
}
OPCENUMSCOPE;

typedef struct tagOPCGROUPHEADER
{
	DWORD       dwSize;
	DWORD       dwItemCount;
	OPCHANDLE   hClientGroup;
	DWORD       dwTransactionID;
	HRESULT     hrStatus;
}
OPCGROUPHEADER;

typedef struct tagOPCITEMHEADER1
{
	OPCHANDLE   hClient;
	DWORD       dwValueOffset;
	WORD        wQuality;
	WORD        wReserved;
	FILETIME    ftTimeStampItem;
}
OPCITEMHEADER1;

typedef struct tagOPCITEMHEADER2
{
	OPCHANDLE   hClient;
	DWORD       dwValueOffset;
	WORD        wQuality;
	WORD        wReserved;
}
OPCITEMHEADER2;

typedef struct tagOPCGROUPHEADERWRITE
{
	DWORD       dwItemCount;
	OPCHANDLE   hClientGroup;
	DWORD       dwTransactionID;
	HRESULT     hrStatus;
}
OPCGROUPHEADERWRITE;

typedef struct tagOPCITEMHEADERWRITE
{
	OPCHANDLE   hClient;
	HRESULT     dwError;
}
OPCITEMHEADERWRITE;

typedef struct tagOPCITEMSTATE
{
	OPCHANDLE   hClient;
	FILETIME    ftTimeStamp;
	WORD        wQuality;
	WORD        wReserved;
	VARIANT     vDataValue;
}
OPCITEMSTATE;

typedef struct tagOPCSERVERSTATUS
{
	FILETIME       ftStartTime;
	FILETIME       ftCurrentTime;
	FILETIME       ftLastUpdateTime;
	OPCSERVERSTATE dwServerState;
	DWORD          dwGroupCount;
	DWORD          dwBandWidth;
	WORD           wMajorVersion;
	WORD           wMinorVersion;
	WORD           wBuildNumber;
	WORD           wReserved;
	[string] LPWSTR         szVendorInfo;
}
OPCSERVERSTATUS;

typedef struct tagOPCITEMDEF
{
	[string]              LPWSTR     szAccessPath;
	[string]              LPWSTR     szItemID;
	BOOL       bActive;
	OPCHANDLE  hClient;
	DWORD      dwBlobSize;
	[size_is(dwBlobSize)] BYTE*      pBlob;
	VARTYPE    vtRequestedDataType;
	WORD       wReserved;
}
OPCITEMDEF;

typedef struct tagOPCITEMATTRIBUTES
{
	[string]              LPWSTR     szAccessPath;
	[string]              LPWSTR     szItemID;
	BOOL       bActive;
	OPCHANDLE  hClient;
	OPCHANDLE  hServer;
	DWORD      dwAccessRights;
	DWORD      dwBlobSize;
	[size_is(dwBlobSize)] BYTE*      pBlob;
	VARTYPE    vtRequestedDataType;
	VARTYPE    vtCanonicalDataType;
	OPCEUTYPE  dwEUType;
	VARIANT    vEUInfo;
}
OPCITEMATTRIBUTES;

typedef struct tagOPCITEMRESULT
{
	OPCHANDLE  hServer;
	VARTYPE    vtCanonicalDataType;
	WORD       wReserved;
	DWORD      dwAccessRights;
	DWORD      dwBlobSize;
	[size_is(dwBlobSize)] BYTE*      pBlob;
}
OPCITEMRESULT;

typedef struct tagOPCITEMPROPERTY
{
	VARTYPE	vtDataType;
	WORD     wReserved;
	DWORD	dwPropertyID;
	[string] LPWSTR	szItemID;
	[string] LPWSTR	szDescription;
	VARIANT	vValue;
	HRESULT	hrErrorID;
	DWORD    dwReserved;
}
OPCITEMPROPERTY;

typedef struct tagOPCITEMPROPERTIES
{
	HRESULT          hrErrorID;
	DWORD	          dwNumProperties;
	[size_is(dwNumProperties)] OPCITEMPROPERTY* pItemProperties;
	DWORD            dwReserved;
}
OPCITEMPROPERTIES;

typedef struct  tagOPCBROWSEELEMENT
{
	[string]	LPWSTR	          szName;
	[string]	LPWSTR	          szItemID;
	DWORD             dwFlagValue;
	DWORD             dwReserved;
	OPCITEMPROPERTIES ItemProperties;
}
OPCBROWSEELEMENT;

typedef struct tagOPCITEMVQT
{
	VARIANT	 vDataValue;
	BOOL	 bQualitySpecified;
	WORD	 wQuality;
	WORD     wReserved;
	BOOL	 bTimeStampSpecified;
	DWORD    dwReserved;
	FILETIME ftTimeStamp;
}
OPCITEMVQT;

typedef enum tagOPCBROWSEFILTER
{
	OPC_BROWSE_FILTER_ALL = 1,
	OPC_BROWSE_FILTER_BRANCHES,
	OPC_BROWSE_FILTER_ITEMS,
}
OPCBROWSEFILTER;

//==============================================================================
// IOPCServer

[
	object,
	uuid(39c13a4d-011e-11d0-9675-0020afd8adb3),
	pointer_default(unique)
]
interface IOPCServer : IUnknown
{
	HRESULT AddGroup(
	[in, string]        LPCWSTR    szName,
	[in]                BOOL       bActive,
	[in]                DWORD      dwRequestedUpdateRate,
	[in]                OPCHANDLE  hClientGroup,
	[unique, in]        LONG*      pTimeBias,
	[unique, in]        FLOAT*     pPercentDeadband,
	[in]                DWORD      dwLCID,
	[out]               OPCHANDLE* phServerGroup,
	[out]               DWORD*     pRevisedUpdateRate,
	[in]                REFIID     riid,
	[out, iid_is(riid)] LPUNKNOWN* ppUnk
	);

	HRESULT GetErrorString(
		[in]          HRESULT dwError,
		[in]          LCID    dwLocale,
		[out, string] LPWSTR* ppString
		);

	HRESULT GetGroupByName(
		[in, string]        LPCWSTR    szName,
		[in]                REFIID     riid,
		[out, iid_is(riid)] LPUNKNOWN* ppUnk
		);

	HRESULT GetStatus(
		[out] OPCSERVERSTATUS** ppServerStatus
		);

	HRESULT RemoveGroup(
		[in] OPCHANDLE hServerGroup,
		[in] BOOL      bForce
		);

	HRESULT CreateGroupEnumerator(
		[in]                OPCENUMSCOPE dwScope,
		[in]                REFIID       riid,
		[out, iid_is(riid)] LPUNKNOWN*   ppUnk
		);
}


//==============================================================================
// IOPCSyncIO

[
	object,
	uuid(39c13a52-011e-11d0-9675-0020afd8adb3),
	pointer_default(unique)
]
interface IOPCSyncIO : IUnknown
{
	HRESULT Read(
	[in]                     OPCDATASOURCE  dwSource,
	[in]                     DWORD          dwCount,
	[in, size_is(dwCount)]   OPCHANDLE*     phServer,
	[out, size_is(, dwCount)] OPCITEMSTATE** ppItemValues,
	[out, size_is(, dwCount)] HRESULT**      ppErrors
	);

	HRESULT Write(
		[in]                     DWORD      dwCount,
		[in, size_is(dwCount)]   OPCHANDLE* phServer,
		[in, size_is(dwCount)]   VARIANT*   pItemValues,
		[out, size_is(, dwCount)] HRESULT**  ppErrors
		);
}



//==============================================================================
// IOPCItemMgt

[
	object,
	uuid(39c13a54-011e-11d0-9675-0020afd8adb3),
	pointer_default(unique)
]
interface IOPCItemMgt : IUnknown
{
	HRESULT AddItems(
	[in]                     DWORD           dwCount,
	[in, size_is(dwCount)]   OPCITEMDEF*     pItemArray,
	[out, size_is(, dwCount)] OPCITEMRESULT** ppAddResults,
	[out, size_is(, dwCount)] HRESULT**       ppErrors
	);

	HRESULT ValidateItems(
		[in]                     DWORD           dwCount,
		[in, size_is(dwCount)]   OPCITEMDEF*     pItemArray,
		[in]                     BOOL            bBlobUpdate,
		[out, size_is(, dwCount)] OPCITEMRESULT** ppValidationResults,
		[out, size_is(, dwCount)] HRESULT**       ppErrors
		);

	HRESULT RemoveItems(
		[in]                        DWORD      dwCount,
		[in, size_is(dwCount)]      OPCHANDLE* phServer,
		[out, size_is(, dwCount)]    HRESULT**  ppErrors
		);

	HRESULT SetActiveState(
		[in]                     DWORD      dwCount,
		[in, size_is(dwCount)]   OPCHANDLE* phServer,
		[in]                     BOOL       bActive,
		[out, size_is(, dwCount)] HRESULT**  ppErrors
		);

	HRESULT SetClientHandles(
		[in]                     DWORD      dwCount,
		[in, size_is(dwCount)]   OPCHANDLE* phServer,
		[in, size_is(dwCount)]   OPCHANDLE* phClient,
		[out, size_is(, dwCount)] HRESULT**  ppErrors
		);

	HRESULT SetDatatypes(
		[in]                     DWORD      dwCount,
		[in, size_is(dwCount)]   OPCHANDLE* phServer,
		[in, size_is(dwCount)]   VARTYPE*   pRequestedDatatypes,
		[out, size_is(, dwCount)] HRESULT**  ppErrors
		);

	HRESULT CreateEnumerator(
		[in]                REFIID     riid,
		[out, iid_is(riid)] LPUNKNOWN* ppUnk
		);
}




[
	uuid(BC417206-8F02-40C8-88C2-3BB1225B1B1C),
	version(1.0),
]
library OPCServerLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	interface IOPCServer;
	interface IOPCSyncIO;
	interface IOPCItemMgt;
	[
		uuid(B5244055-DE19-4CD4-9F8A-63700A6401A0)		
	]
	coclass Server
	{
		[default] interface IOPCServer;
	};
};

